'''
평범한 배낭 분류
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	512 MB	28158	10657	7066	36.180%
문제
이 문제는 아주 평범한 배낭에 관한 문제이다.

한 달 후면 국가의 부름을 받게 되는 준서는 여행을 가려고 한다. 세상과의 단절을 슬퍼하며 최대한 즐기기 위한 여행이기 때문에, 가지고 다닐 배낭 또한 최대한 가치 있게 싸려고 한다.

준서가 여행에 필요하다고 생각하는 N개의 물건이 있다. 각 물건은 무게 W와 가치 V를 가지는데, 해당 물건을 배낭에 넣어서 가면 준서가 V만큼 즐길 수 있다. 
아직 행군을 해본 적이 없는 준서는 최대 K만큼의 무게만을 넣을 수 있는 배낭만 들고 다닐 수 있다. 
준서가 최대한 즐거운 여행을 하기 위해 배낭에 넣을 수 있는 물건들의 가치의 최댓값을 알려주자.

입력
첫 줄에 물품의 수 N(1 ≤ N ≤ 100)과 준서가 버틸 수 있는 무게 K(1 ≤ K ≤ 100,000)가 주어진다. 
두 번째 줄부터 N개의 줄에 거쳐 각 물건의 무게 W(1 ≤ W ≤ 100,000)와 해당 물건의 가치 V(0 ≤ V ≤ 1,000)가 주어진다.

입력으로 주어지는 모든 수는 정수이다.

출력
한 줄에 배낭에 넣을 수 있는 물건들의 가치합의 최댓값을 출력한다.

예제 입력 1 
4 7
6 13
4 8
3 6
5 12
예제 출력 1 
14
'''
def max(a,b):
    result = 0
    if a > b:
        result = a
    else:
        result = b
    return result


n, k = map(int, input().split())

arr = [[]]

for _ in range(n):
    arr.append(list(map(int,input().split())))

dp = []
for _ in range(n+1):
    dp.append([0 for _ in range(k+1)])

for i in range(1,n+1):
    for j in range(1,k+1):
        if j >= arr[i][0]:
            dp[i][j]=max(dp[i - 1][j], (dp[i - 1][j - arr[i][0]]) + arr[i][1])
        else:
            dp[i][j] = dp[i - 1][j]
print(dp[n][k])

'''코드해설 : 다이나믹 프로그래밍
데이터배열의 무게와 가치를 dp배열에 추가해가면서
최대물건 i 개, 최대무게 j 를 지닐수 있을때 가지는 최대가치값을 dp[i][j]에 저장한다.
엄밀히말하면, 모든데이터에관해서 최대가치값이아니라, i번째 까지의 데이터에관해 최대가치값이다.
정답은 n 개의 데이터에관해서 최대가치값이기 때문에 하나씩 추가해가면서 풀 수있다.
현재 추가하는 데이터 [a ,b]에 관해서
1. 최대무게가 a 보다 클경우(삽입이 가능)
    1. 현재데이터를 추가해야 가치가 클경우경우
        dp[i][j] = dp[i-1][j - arr[i][0]] + arr[i][1] (i-1개의 물건을 쓰고, 최대무게가 j - 현재물건의무게 인경우의 가치최대값 + 현재 가치값)
    2. 1개의 물건을 손해봐도 가치가 클경우
        dp[i][j] = dp[i-1][j]
2. 최대무게가 a 보다 작은경우(삽입이 불가능)
'''





